package inference

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"iter"

	"github.com/honganh1206/clue/message"
	"github.com/honganh1206/clue/prompts"
	"github.com/honganh1206/clue/schema"
	"github.com/honganh1206/clue/tools"
	"google.golang.org/genai"
)

type GeminiModel struct {
	client    *genai.Client
	model     ModelVersion
	maxTokens int64
	// TODO: Fields for contents and tools during runtime?
}

func NewGeminiModel(client *genai.Client, model ModelVersion, maxTokens int64) *GeminiModel {
	return &GeminiModel{
		client:    client,
		model:     model,
		maxTokens: maxTokens,
	}
}

func (m *GeminiModel) Name() string {
	return GoogleModelName
}

func getGeminiModelName(model ModelVersion) string {
	return string(model)
}

func (m *GeminiModel) RunInference(ctx context.Context, msgs []*message.Message, tools []tools.ToolDefinition) (*message.Message, error) {
	contents := convertToGeminiContents(msgs)

	geminiTools, err := convertToGeminiTools(tools)
	if err != nil {
		return nil, fmt.Errorf("failed to convert tools: %w", err)
	}

	modelName := getGeminiModelName(m.model)

	sysPrompt := prompts.GeminiSystemPrompt()

	config := &genai.GenerateContentConfig{
		MaxOutputTokens:   int32(m.maxTokens),
		Tools:             geminiTools,
		SystemInstruction: genai.NewContentFromText(sysPrompt, genai.RoleUser),
	}

	iter := m.client.Models.GenerateContentStream(ctx, modelName, contents, config)

	response, err := streamGeminiResponse(iter)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func streamGeminiResponse(response iter.Seq2[*genai.GenerateContentResponse, error]) (*message.Message, error) {
	var fullText string
	var toolCalls []message.ContentBlock
	var outputContents []*genai.Content

	msg := &message.Message{
		Role:    message.ModelRole,
		Content: make([]message.ContentBlock, 0),
	}

	for chunk, err := range response {
		if err == io.EOF {
			break
		}

		if err != nil {
			return nil, err
		}

		// A candidate contains a content,
		// a content contains one or more parts
		if len(chunk.Candidates) == 0 || chunk.Candidates[0].Content == nil {
			return nil, fmt.Errorf("no content returned")
		}

		// First candidate is the most relevant response generated by the model,
		// so we only record the first candidate's content as the best one
		bestCandidate := chunk.Candidates[0]
		bestContent := bestCandidate.Content

		// If no parts, check if this is a completion signal
		if len(bestContent.Parts) == 0 {
			if bestCandidate.FinishReason != "" {
				// TODO: We have a max length limit of 1024
				// so if the content exceeds 1024 the fetch MCP tool would stop
				// and there will be a finish reason
				fmt.Printf("finish reason indicates: %v\n", chunk.Candidates[0].FinishReason)
				// Continue to next chunk instead of processing empty parts
				outputContents = append(outputContents, bestContent)
				continue
			}
		}

		for _, p := range bestContent.Parts {
			if p.Text != "" {
				fmt.Print(p.Text)
				fullText += p.Text
			}
			if p.FunctionCall != nil {
				fc := p.FunctionCall
				inputBytes, err := json.Marshal(fc.Args)
				if err != nil {
					return nil, fmt.Errorf("failed to marshal function args: %w", err)
				}

				toolCall := message.NewToolUseBlock(
					fc.ID,
					fc.Name,
					inputBytes,
				)
				toolCalls = append(toolCalls, toolCall)
			}
		}

		outputContents = append(outputContents, bestContent)
	}

	if fullText != "" {
		msg.Content = append(msg.Content, message.NewTextBlock(fullText))
	}

	msg.Content = append(msg.Content, toolCalls...)
	fmt.Println()

	return msg, nil
}

func convertToGeminiContents(msgs []*message.Message) []*genai.Content {
	contents := make([]*genai.Content, 0, len(msgs))

	for _, msg := range msgs {
		parts := convertToGeminiParts(msg.Content)
		if len(parts) == 0 {
			continue
		}

		content := &genai.Content{
			Role:  msg.Role,
			Parts: parts,
		}

		contents = append(contents, content)
	}

	return contents
}

func convertToGeminiParts(blocks []message.ContentBlock) []*genai.Part {
	parts := make([]*genai.Part, 0, len(blocks))

	for _, b := range blocks {
		switch b.Type() {
		case message.TextType:
			if textBlock, ok := b.(message.TextBlock); ok {
				parts = append(parts, genai.NewPartFromText(textBlock.Text))
			}
		case message.ToolUseType:
			if toolUse, ok := b.(message.ToolUseBlock); ok {
				var args map[string]any

				err := json.Unmarshal(toolUse.Input, &args)
				if err != nil {
					continue
				}

				parts = append(parts, genai.NewPartFromFunctionCall(toolUse.Name, args))
			}
		case message.ToolResultType:
			if toolResult, ok := b.(message.ToolResultBlock); ok {
				// Gemini NEEDS the content to be wrapped inside "result"
				response := map[string]any{"result": toolResult.Content}

				parts = append(parts, genai.NewPartFromFunctionResponse(toolResult.ToolName, response))
			}
		}
	}

	return parts
}

func convertToGeminiTools(tools []tools.ToolDefinition) ([]*genai.Tool, error) {
	if len(tools) == 0 {
		return nil, nil
	}

	builtinTool := &genai.Tool{
		FunctionDeclarations: make([]*genai.FunctionDeclaration, 0, len(tools)),
	}

	for _, tool := range tools {
		geminiToolFuncDec, err := convertToGeminiFunctionDeclaration(tool)
		if err != nil {
			return nil, err
		}
		builtinTool.FunctionDeclarations = append(builtinTool.FunctionDeclarations, geminiToolFuncDec)
	}

	return []*genai.Tool{builtinTool}, nil
}

func convertToGeminiFunctionDeclaration(tool tools.ToolDefinition) (*genai.FunctionDeclaration, error) {
	params, err := schema.ConvertToGeminiSchema(tool.InputSchema)
	if err != nil {
		return nil, fmt.Errorf("failed to convert schema to Gemini format: %w", err)
	}

	functionDecl := &genai.FunctionDeclaration{
		Name:        tool.Name,
		Description: tool.Description,
		Parameters:  params,
	}

	return functionDecl, nil
}
